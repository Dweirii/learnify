datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String  @id @default(uuid())
  username       String  @unique
  imageUrl       String  @db.Text
  externalUserId String  @unique
  bio            String? @db.Text

  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blocking  Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  stream      Stream?
  socialLinks SocialLink[]
  scheduledStreams ScheduledStream[]

  // Gamification relations
  userStats       UserStats?
  xpTransactions  XPTransaction[]
  streamSessions  StreamSession[]
  viewSessions    ViewSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StreamCategory {
  CODING_TECHNOLOGY
  CREATIVITY_ARTS
  STUDY_FOCUS
  INNOVATION_BUSINESS
}

enum SocialPlatform {
  GITHUB
  YOUTUBE
  LINKEDIN
  INSTAGRAM
  TWITTER
  FACEBOOK
}

model Stream {
  id           String  @id @default(uuid())
  name         String  @db.Text
  thumbnailUrl String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  viewerCount Int @default(0)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  category StreamCategory @default(INNOVATION_BUSINESS)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Gamification relations
  streamSessions  StreamSession[]
  viewSessions    ViewSession[]

  @@index([userId])
  @@index([ingressId])
  @@index([viewerCount, updatedAt])
  @@index([isLive, viewerCount]) 
  @@index([isLive, updatedAt])  
  @@index([category])             
  @@index([category, isLive])         
  @@index([category, isLive, updatedAt])
  @@index([category, isLive, viewerCount]) 
  @@index([isLive, viewerCount, updatedAt]) 
  @@index([name])                     
  @@index([updatedAt])  
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower  User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@index([followerId, followingId])
  @@index([followingId, followerId])  
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
  @@index([blockerId, blockedId])
  @@index([blockedId, blockerId]) 
}

model SocialLink {
  id       String         @id @default(uuid())
  userId   String
  platform SocialPlatform
  url      String         @db.Text
  order    Int            @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, platform])
  @@index([userId])
  @@index([userId, order])
}

model ScheduledStream {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title       String   @db.Text
  description String?  @db.Text
  category    StreamCategory
  
  startTime   DateTime
  duration    Int      // in minutes
  isFlexibleDuration Boolean @default(false)
  
  // Timezone
  timezone    String   @default("UTC")
  
  // Status
  isCancelled Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId]) // Index for user queries
  @@index([startTime, isCancelled]) // For cleanup queries
  @@index([userId, startTime]) // For user-specific date range queries
}

// ===========================================
// GAMIFICATION MODELS
// ===========================================

model UserStats {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Core XP & Level
  totalXP           Int      @default(0)
  level             Int      @default(1)
  
  // Activity Tracking
  streamMinutes     Int      @default(0)
  watchMinutes      Int      @default(0)
  chatMessageCount  Int      @default(0)
  
  // Metadata
  lastXPUpdate      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  xpTransactions    XPTransaction[]
  streamSessions    StreamSession[]
  viewSessions      ViewSession[]
  
  @@index([totalXP])
  @@index([level])
  @@index([streamMinutes])
  @@index([watchMinutes])
  @@index([userId])
}

model XPTransaction {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "XPTransaction_userId_fkey")
  userStats   UserStats @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "XPTransaction_userStats_userId_fkey")

  amount      Int
  reason      String
  metadata    Json?
  
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([createdAt])
  @@index([reason])
}

model StreamSession {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "StreamSession_userId_fkey")
  userStats       UserStats @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "StreamSession_userStats_userId_fkey")
  
  streamId        String
  stream          Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  startTime       DateTime @default(now())
  endTime         DateTime?
  durationMinutes Int      @default(0)
  peakViewers     Int      @default(0)
  
  // Status tracking
  isActive        Boolean  @default(true)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId])
  @@index([streamId])
  @@index([startTime])
  @@index([isActive])
}

model ViewSession {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "ViewSession_userId_fkey")
  userStats       UserStats @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "ViewSession_userStats_userId_fkey")
  
  streamId        String
  stream          Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  startTime       DateTime @default(now())
  endTime         DateTime?
  durationMinutes Int      @default(0)
  
  // Status tracking
  isActive        Boolean  @default(true)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId])
  @@index([streamId])
  @@index([startTime])
  @@index([isActive])
}